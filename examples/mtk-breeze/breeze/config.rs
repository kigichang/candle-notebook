use serde::{Deserialize, Serialize};
use std::collections::HashMap;

#[derive(Debug, Serialize, Deserialize)]
pub struct Config {
    #[serde(rename = "_commit_hash")]
    pub commit_hash: Option<String>,
    #[serde(rename = "_name_or_path")]
    pub name_or_path: String,
    pub architectures: Vec<String>,
    pub auto_map: AutoMap,
    pub downsample_ratio: f64,
    pub dynamic_image_size: bool,
    pub force_image_size: i64,
    pub hidden_size: i64,
    pub llm_config: LlmConfig,
    pub max_dynamic_patch: i64,
    pub min_dynamic_patch: i64,
    pub model_type: String,
    pub pad2square: bool,
    pub ps_version: String,
    pub select_layer: i64,
    pub template: String,
    pub tie_word_embeddings: bool,
    pub torch_dtype: String,
    pub transformers_version: Option<String>,
    pub use_backbone_lora: i64,
    pub use_llm_lora: i64,
    pub use_thumbnail: bool,
    pub vision_config: VisionConfig,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct AutoMap {
    #[serde(rename = "AutoConfig")]
    pub auto_config: String,
    #[serde(rename = "AutoModel")]
    pub auto_model: String,
    #[serde(rename = "AutoModelForCausalLM")]
    pub auto_model_for_causal_lm: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct LlmConfig {
    #[serde(rename = "_name_or_path")]
    pub name_or_path: String,
    pub add_cross_attention: bool,
    pub architectures: Vec<String>,
    pub attention_bias: bool,
    pub attention_dropout: f64,
    pub bad_words_ids: Option<serde_json::Value>,
    pub begin_suppress_tokens: Option<serde_json::Value>,
    pub bos_token_id: Option<i64>,
    pub chunk_size_feed_forward: i64,
    pub cross_attention_hidden_size: Option<i64>,
    pub decoder_start_token_id: Option<i64>,
    pub diversity_penalty: f64,
    pub do_sample: bool,
    pub early_stopping: bool,
    pub encoder_no_repeat_ngram_size: i64,
    pub eos_token_id: Vec<i64>,
    pub exponential_decay_length_penalty: Option<f64>,
    pub finetuning_task: Option<String>,
    pub forced_bos_token_id: Option<i64>,
    pub forced_eos_token_id: Option<i64>,
    pub head_dim: i64,
    pub hidden_act: String,
    pub hidden_size: i64,
    pub id2label: HashMap<String, String>,
    pub initializer_range: f64,
    pub intermediate_size: i64,
    pub is_decoder: bool,
    pub is_encoder_decoder: bool,
    pub label2id: HashMap<String, i64>,
    pub length_penalty: f64,
    pub max_length: i64,
    pub max_position_embeddings: i64,
    pub min_length: i64,
    pub mlp_bias: bool,
    pub model_type: String,
    pub no_repeat_ngram_size: i64,
    pub num_attention_heads: i64,
    pub num_beam_groups: i64,
    pub num_beams: i64,
    pub num_hidden_layers: i64,
    pub num_key_value_heads: i64,
    pub num_return_sequences: i64,
    pub output_attentions: bool,
    pub output_hidden_states: bool,
    pub output_scores: bool,
    pub pad_token_id: Option<i64>,
    pub prefix: Option<String>,
    pub pretraining_tp: i64,
    pub problem_type: Option<String>,
    pub pruned_heads: HashMap<String, serde_json::Value>,
    pub remove_invalid_values: bool,
    pub repetition_penalty: f64,
    pub return_dict: bool,
    pub return_dict_in_generate: bool,
    pub rms_norm_eps: f64,
    pub rope_scaling: RopeScaling,
    pub rope_theta: f64,
    pub sep_token_id: Option<i64>,
    pub suppress_tokens: Option<serde_json::Value>,
    pub task_specific_params: Option<serde_json::Value>,
    pub temperature: f64,
    pub tf_legacy_loss: bool,
    pub tie_encoder_decoder: bool,
    pub tie_word_embeddings: bool,
    pub tokenizer_class: Option<String>,
    pub top_k: i64,
    pub top_p: f64,
    pub torch_dtype: String,
    pub torchscript: bool,
    pub transformers_version: String,
    pub typical_p: f64,
    pub use_bfloat16: bool,
    pub use_cache: bool,
    pub vocab_size: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct RopeScaling {
    pub factor: f64,
    pub high_freq_factor: f64,
    pub low_freq_factor: f64,
    pub original_max_position_embeddings: i64,
    pub rope_type: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VisionConfig {
    #[serde(rename = "_name_or_path")]
    pub name_or_path: String,
    pub add_cross_attention: bool,
    pub architectures: Vec<String>,
    pub attention_dropout: f64,
    pub auto_map: VisionAutoMap,
    pub bad_words_ids: Option<serde_json::Value>,
    pub begin_suppress_tokens: Option<serde_json::Value>,
    pub bos_token_id: Option<i64>,
    pub chunk_size_feed_forward: i64,
    pub cross_attention_hidden_size: Option<i64>,
    pub decoder_start_token_id: Option<i64>,
    pub diversity_penalty: f64,
    pub do_sample: bool,
    pub drop_path_rate: f64,
    pub dropout: f64,
    pub early_stopping: bool,
    pub encoder_no_repeat_ngram_size: i64,
    pub eos_token_id: Option<i64>,
    pub exponential_decay_length_penalty: Option<f64>,
    pub finetuning_task: Option<String>,
    pub forced_bos_token_id: Option<i64>,
    pub forced_eos_token_id: Option<i64>,
    pub hidden_act: String,
    pub hidden_size: usize,
    pub id2label: HashMap<String, String>,
    pub image_size: usize,
    pub initializer_factor: f64,
    pub initializer_range: f64,
    pub intermediate_size: i64,
    pub is_decoder: bool,
    pub is_encoder_decoder: bool,
    pub label2id: HashMap<String, i64>,
    pub layer_norm_eps: f64,
    pub length_penalty: f64,
    pub max_length: i64,
    pub min_length: i64,
    pub model_type: String,
    pub no_repeat_ngram_size: i64,
    pub norm_type: String,
    pub num_attention_heads: i64,
    pub num_beam_groups: i64,
    pub num_beams: i64,
    pub num_channels: i64,
    pub num_hidden_layers: i64,
    pub num_return_sequences: i64,
    pub output_attentions: bool,
    pub output_hidden_states: bool,
    pub output_scores: bool,
    pub pad_token_id: Option<i64>,
    pub patch_size: usize,
    pub prefix: Option<String>,
    pub problem_type: Option<String>,
    pub pruned_heads: HashMap<String, serde_json::Value>,
    pub qk_normalization: bool,
    pub qkv_bias: bool,
    pub remove_invalid_values: bool,
    pub repetition_penalty: f64,
    pub return_dict: bool,
    pub return_dict_in_generate: bool,
    pub sep_token_id: Option<i64>,
    pub suppress_tokens: Option<serde_json::Value>,
    pub task_specific_params: Option<serde_json::Value>,
    pub temperature: f64,
    pub tf_legacy_loss: bool,
    pub tie_encoder_decoder: bool,
    pub tie_word_embeddings: bool,
    pub tokenizer_class: Option<String>,
    pub top_k: i64,
    pub top_p: f64,
    pub torch_dtype: String,
    pub torchscript: bool,
    pub transformers_version: String,
    pub typical_p: f64,
    pub use_bfloat16: bool,
    pub use_flash_attn: bool,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct VisionAutoMap {
    #[serde(rename = "AutoConfig")]
    pub auto_config: String,
    #[serde(rename = "AutoModel")]
    pub auto_model: String,
}
